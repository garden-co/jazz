///
/// HybridCoJSONCoreRNSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `SessionLogHandle` to properly resolve imports.
namespace margelo::nitro::cojson_core_rn { struct SessionLogHandle; }
// Forward declaration of `TransactionResult` to properly resolve imports.
namespace margelo::nitro::cojson_core_rn { struct TransactionResult; }
// Forward declaration of `U8VecResult` to properly resolve imports.
namespace margelo::nitro::cojson_core_rn { struct U8VecResult; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include "SessionLogHandle.hpp"
#include <string>
#include "TransactionResult.hpp"
#include <vector>
#include "U8VecResult.hpp"
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::cojson_core_rn {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `CoJSONCoreRN`
   * Inherit this class to create instances of `HybridCoJSONCoreRNSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridCoJSONCoreRN: public HybridCoJSONCoreRNSpec {
   * public:
   *   HybridCoJSONCoreRN(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridCoJSONCoreRNSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridCoJSONCoreRNSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridCoJSONCoreRNSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual SessionLogHandle createSessionLog(const std::string& coId, const std::string& sessionId, const std::string& signerId) = 0;
      virtual SessionLogHandle cloneSessionLog(const SessionLogHandle& handle) = 0;
      virtual TransactionResult tryAddTransactions(const SessionLogHandle& handle, const std::vector<std::string>& transactionsJson, const std::string& newSignature, bool skipVerify) = 0;
      virtual TransactionResult addNewPrivateTransaction(const SessionLogHandle& handle, const std::string& changesJson, const std::string& signerSecret, const std::string& encryptionKey, const std::string& keyId, double madeAt, const std::string& meta) = 0;
      virtual TransactionResult addNewTrustingTransaction(const SessionLogHandle& handle, const std::string& changesJson, const std::string& signerSecret, double madeAt, const std::string& meta) = 0;
      virtual TransactionResult testExpectedHashAfter(const SessionLogHandle& handle, const std::vector<std::string>& transactionsJson) = 0;
      virtual TransactionResult decryptNextTransactionChangesJson(const SessionLogHandle& handle, double txIndex, const std::string& keySecret) = 0;
      virtual void destroySessionLog(const SessionLogHandle& handle) = 0;
      virtual U8VecResult sealMessage(const std::shared_ptr<ArrayBuffer>& message, const std::string& senderSecret, const std::string& recipientId, const std::shared_ptr<ArrayBuffer>& nonceMaterial) = 0;
      virtual U8VecResult unsealMessage(const std::shared_ptr<ArrayBuffer>& sealedMessage, const std::string& recipientSecret, const std::string& senderId, const std::shared_ptr<ArrayBuffer>& nonceMaterial) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "CoJSONCoreRN";
  };

} // namespace margelo::nitro::cojson_core_rn
