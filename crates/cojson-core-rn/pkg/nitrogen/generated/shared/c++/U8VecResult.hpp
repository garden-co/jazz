///
/// U8VecResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <string>

namespace margelo::nitro::cojson_core_rn {

  /**
   * A struct which can be represented as a JavaScript object (U8VecResult).
   */
  struct U8VecResult {
  public:
    bool success     SWIFT_PRIVATE;
    std::shared_ptr<ArrayBuffer> data     SWIFT_PRIVATE;
    std::string error     SWIFT_PRIVATE;

  public:
    U8VecResult() = default;
    explicit U8VecResult(bool success, std::shared_ptr<ArrayBuffer> data, std::string error): success(success), data(data), error(error) {}
  };

} // namespace margelo::nitro::cojson_core_rn

namespace margelo::nitro {

  // C++ U8VecResult <> JS U8VecResult (object)
  template <>
  struct JSIConverter<margelo::nitro::cojson_core_rn::U8VecResult> final {
    static inline margelo::nitro::cojson_core_rn::U8VecResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::cojson_core_rn::U8VecResult(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "success")),
        JSIConverter<std::shared_ptr<ArrayBuffer>>::fromJSI(runtime, obj.getProperty(runtime, "data")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "error"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::cojson_core_rn::U8VecResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "success", JSIConverter<bool>::toJSI(runtime, arg.success));
      obj.setProperty(runtime, "data", JSIConverter<std::shared_ptr<ArrayBuffer>>::toJSI(runtime, arg.data));
      obj.setProperty(runtime, "error", JSIConverter<std::string>::toJSI(runtime, arg.error));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "success"))) return false;
      if (!JSIConverter<std::shared_ptr<ArrayBuffer>>::canConvert(runtime, obj.getProperty(runtime, "data"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "error"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
