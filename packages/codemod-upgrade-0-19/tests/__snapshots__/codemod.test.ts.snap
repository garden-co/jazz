// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`runTransform 1`] = `
"// @ts-nocheck

// Test file demonstrating Jazz hook patterns that will be migrated
// This file shows examples of what the codemod will transform

import {
  useAccount,
  useCoState, useAgent, useLogOut } from "jazz-tools/react";
import { co, Account, z } from "jazz-tools";

const TodoItem = co.map({
  text: z.string(),
  done: z.boolean(),
});

const TodoList = co.list(TodoItem);

const MyAccount = co
  .account({
    root: co.map({ todos: TodoList }),
    profile: co.profile(),
  })
  .withMigration(async (account) => {
    if (!account.$jazz.has("root")) {
      account.$jazz.set("root", { todos: [] });
    }
  });

// $onError: 'catch' should become $onError: 'catch'
function ExampleOnErrorNull() {
  const me = useAccount(MyAccount, {
    resolve: { root: { todos: { $each: { $onError: 'catch' } } } },
      select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null
});

  return <div>{me?.root.todos[0]?.text}</div>;
}

// useCoStateWithSelector should become useCoState
function ExampleCoState({ todoId }: { todoId: string }) {
  // Should be transformed to useCoState
  const todo = useCoState(TodoItem, todoId, {
    resolve: { text: true, done: true },
    select: (todo) => todo.$isLoaded ? todo : todo.$jazz.loadingState === "loading" ? undefined : null,
  });

  return (
    <div>
      <span>{todo?.text}</span>
      <input type="checkbox" checked={todo?.done} />
    </div>
  );
}

// useAccountWithSelector should become useAccount
function ExampleAccount() {
  // Should be transformed to useAccount
  const todos = useAccount(MyAccount, {
    resolve: { root: { todos: { $each: { $onError: 'catch' } } } },
    select: (me) => me.$isLoaded ? me.root.todos : me.$jazz.loadingState === "loading" ? undefined : null,
  });

  return (
    <ul>
      {todos?.map((todo) => (
        <li key={todo.$jazz.id}>{todo.text}</li>
      ))}
    </ul>
  );
}

// Multiple usages in same component
function ComplexComponent({ itemId }: { itemId: string }) {
  // Should be transformed to useCoState
  const item = useCoState(TodoItem, itemId, {
    resolve: { text: true },
    select: (item) => item.$isLoaded ? item : item.$jazz.loadingState === "loading" ? undefined : null,
  });

  // Should be transformed to useAccount
  const account = useAccount(MyAccount, {
    resolve: { root: true },
    select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null,
  });

  return (
    <div>
      <h1>{item?.text}</h1>
      <p>Owner: {account?.root?.owner}</p>
    </div>
  );
}

// Old useAccount pattern with destructuring { me, agent, logOut }
function OldUseAccountPattern() {
  // const me = useAccount();
  // const agent = useAgent();
  // const logOut = useLogOut();
  const me = useAccount(undefined, { select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null });
  const agent = useAgent();
  const logOut = useLogOut();

  return (
    <div>
      <p>User: {me?.profile?.name}</p>
      <button onClick={logOut}>Log out</button>
      <pre>{JSON.stringify(agent, null, 2)}</pre>
    </div>
  );
}

// Old useAccount pattern with only some properties
function PartialUseAccountPattern() {
  // const me = useAccount();
  // const logOut = useLogOut();
  const me = useAccount(undefined, { select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null });
  const logOut = useLogOut();

  return (
    <div>
      <p>User: {me?.profile?.name}</p>
      <button onClick={logOut}>Log out</button>
    </div>
  );
}

// Old useAccount pattern with only me
function OnlyMePattern() {
  // const me = useAccount();
  const me = useAccount(undefined, { select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null });

  return <div>{me?.profile?.name}</div>;
}

// Old useAccount pattern with aliasing
function AliasedPattern() {
  // const currentUser = useAccount();
  // const myAgent = useAgent();
  const currentUser = useAccount(undefined, { select: (currentUser) => currentUser.$isLoaded ? currentUser : currentUser.$jazz.loadingState === "loading" ? undefined : null });
  const myAgent = useAgent();

  return (
    <div>
      <p>{currentUser?.profile?.name}</p>
      <pre>{JSON.stringify(myAgent, null, 2)}</pre>
    </div>
  );
}

// Old useAccount non-destructured pattern with account, agent and logOut
function NoDestructuringWithAccountAgentLogOut() {
  // const account = useAccount();
  // const agent = useAgent();
  // const logOut = useLogOut();
  const account = useAccount(undefined, { select: (account) => account.$isLoaded ? account : account.$jazz.loadingState === "loading" ? undefined : null });
  const agent = useAgent();
  const logOut = useLogOut();

  return (
    <div>
      {/* account?.profile?.name */}
      <p>{account?.profile?.name}</p>
      {/* logOut */}
      <button onClick={logOut}>Log out</button>
      {/* agent */}
      <pre>{JSON.stringify(agent, null, 2)}</pre>
    </div>
  );
}

// Hook without existing selector
function HookWithoutExistingSelector() {
  // const account = useAccount(MyAccount, {
  //   resolve: { profile: true },
  //   select: (account) => account.$isLoaded
  //    ? account
  //    : account.$jazz.loadingState === "loading"
  //      ? undefined
  //      : null
  // });
  const account = useAccount(MyAccount, {
    resolve: { profile: true },
      select: (account) => account.$isLoaded ? account : account.$jazz.loadingState === "loading" ? undefined : null
});

  return <div>{account?.profile?.name}</div>;
}

// Hook with existing selector
function HookWithExistingSelector() {
  // const profileName = useAccount(MyAccount, {
  //   resolve: { profile: true },
  //   select: (account) => account.$isLoaded
  //    ? account.profile.name
  //    : account.$jazz.loadingState === "loading"
  //      ? undefined
  //      : null
  // });
  const profileName = useAccount(MyAccount, {
    resolve: { profile: true },
    select: (account) => account.$isLoaded ? account.profile.name : account.$jazz.loadingState === "loading" ? undefined : null,
  });

  return <div>{profileName}</div>;
}

// Hook with no options argument at all
function HookWithNoOptions() {
  // Should add: useAccount() -> useAccount(undefined, { select: (me) => ... })
  const me = useAccount(undefined, { select: (me) => me.$isLoaded ? me : me.$jazz.loadingState === "loading" ? undefined : null });

  return <div>{me?.profile?.name}</div>;
}

// Hook with schema but no options
function HookWithSchemaNoOptions() {
  // Should add: useAccount(MyAccount) -> useAccount(undefined, { select: (account) => ... })
  const account = useAccount(MyAccount, { select: (account) => account.$isLoaded ? account : account.$jazz.loadingState === "loading" ? undefined : null });

  return <div>{account?.profile?.name}</div>;
}

export {
  ExampleOnErrorNull,
  ExampleCoState,
  ExampleAccount,
  ComplexComponent,
  OldUseAccountPattern,
  PartialUseAccountPattern,
  OnlyMePattern,
  AliasedPattern,
  NoDestructuringPattern,
  NoDestructuringWithAccountAgentLogOut,
  HookWithoutExistingSelector,
  HookWithExistingSelector,
  HookWithNoOptions,
  HookWithSchemaNoOptions,
};
"
`;
