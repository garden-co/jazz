import { AgentSecret, LocalNode, WasmCrypto } from "cojson";
import {
  Account,
  AccountClass,
  CoValue,
  ID,
  Inbox,
  createJazzContext,
  fixedCredentialsAuth,
  isAdminInboxTicket,
  randomSessionProvider,
} from "jazz-tools";
import { webSocketWithReconnection } from "./webSocketWithReconnection.js";

type BaseWorkerOptions<Acc extends Account> = {
  accountID?: string;
  accountSecret?: string;
  syncServer?: string;
  AccountSchema?: AccountClass<Acc>;
};

type InboxOptions<M extends CoValue> =
  | {
      inboxTicket: string;
      onInboxMessage: (messageId: ID<M>) => Promise<void>;
    }
  | {};

type WorkerOptions<
  Acc extends Account,
  M extends CoValue,
> = BaseWorkerOptions<Acc> & InboxOptions<M>;

/** @category Context Creation */
export async function startWorker<Acc extends Account, M extends CoValue>(
  options: WorkerOptions<Acc, M>,
): Promise<{ worker: Acc; done: () => Promise<void> }> {
  const {
    accountID = process.env.JAZZ_WORKER_ACCOUNT,
    accountSecret = process.env.JAZZ_WORKER_SECRET,
    syncServer = "wss://cloud.jazz.tools",
    AccountSchema = Account as unknown as AccountClass<Acc>,
  } = options;

  let node: LocalNode | undefined = undefined;
  const wsPeer = webSocketWithReconnection(syncServer, (peer) => {
    node?.syncManager.addPeer(peer);
  });

  if (!accountID) {
    throw new Error("No accountID provided");
  }
  if (!accountSecret) {
    throw new Error("No accountSecret provided");
  }
  if (!accountID.startsWith("co_")) {
    throw new Error("Invalid accountID");
  }
  if (!accountSecret?.startsWith("sealerSecret_")) {
    throw new Error("Invalid accountSecret");
  }

  const context = await createJazzContext({
    auth: fixedCredentialsAuth({
      accountID: accountID as ID<Acc>,
      secret: accountSecret as AgentSecret,
    }),
    AccountSchema,
    // TODO: locked sessions similar to browser
    sessionProvider: randomSessionProvider,
    peersToLoadFrom: [wsPeer.peer],
    crypto: await WasmCrypto.create(),
  });

  node = context.account._raw.core.node;

  let unsubscribeInbox = () => {};

  if ("inboxTicket" in options) {
    if (!isAdminInboxTicket(options.inboxTicket)) {
      throw new Error(
        "Invalid inbox ticket, ensure that you are using an admin ticket generated by the Jazz Run CLI",
      );
    }

    const inbox = await Inbox.load<M>(options.inboxTicket, context.account);

    unsubscribeInbox = inbox.subscribe(options.onInboxMessage);
  }

  async function done() {
    await context.account.waitForAllCoValuesSync();

    unsubscribeInbox();
    wsPeer.done();
    context.done();
  }

  return { worker: context.account as Acc, done };
}
