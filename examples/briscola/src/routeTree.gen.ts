/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as GameImport } from "./routes/game";
import { Route as GameGameIdImport } from "./routes/game/$gameId";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const GameRoute = GameImport.update({
  id: "/game",
  path: "/game",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const GameGameIdRoute = GameGameIdImport.update({
  id: "/$gameId",
  path: "/$gameId",
  getParentRoute: () => GameRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/game": {
      id: "/game";
      path: "/game";
      fullPath: "/game";
      preLoaderRoute: typeof GameImport;
      parentRoute: typeof rootRoute;
    };
    "/game/$gameId": {
      id: "/game/$gameId";
      path: "/$gameId";
      fullPath: "/game/$gameId";
      preLoaderRoute: typeof GameGameIdImport;
      parentRoute: typeof GameImport;
    };
  }
}

// Create and export the route tree

interface GameRouteChildren {
  GameGameIdRoute: typeof GameGameIdRoute;
}

const GameRouteChildren: GameRouteChildren = {
  GameGameIdRoute: GameGameIdRoute,
};

const GameRouteWithChildren = GameRoute._addFileChildren(GameRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/game": typeof GameRouteWithChildren;
  "/game/$gameId": typeof GameGameIdRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/game": typeof GameRouteWithChildren;
  "/game/$gameId": typeof GameGameIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/game": typeof GameRouteWithChildren;
  "/game/$gameId": typeof GameGameIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/game" | "/game/$gameId";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/game" | "/game/$gameId";
  id: "__root__" | "/" | "/game" | "/game/$gameId";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  GameRoute: typeof GameRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameRoute: GameRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/game": {
      "filePath": "game.tsx",
      "children": [
        "/game/$gameId"
      ]
    },
    "/game/$gameId": {
      "filePath": "game/$gameId.tsx",
      "parent": "/game"
    }
  }
}
ROUTE_MANIFEST_END */
